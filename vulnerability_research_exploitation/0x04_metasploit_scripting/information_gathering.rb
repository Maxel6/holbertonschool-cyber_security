require 'msf/core'

class MetasploitModule < Msf::Post
  include Msf::Post::Windows::Sysinfo
  include Msf::Post::Windows::Accounts
  include Msf::Post::Windows::Network
  include Msf::Post::Windows::Processes

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Information Gathering Module',
      'Description' => 'Gathers system, user, network, and process information from a target system.',
      'License'     => MSF_LICENSE,
      'Author'      => 'Axel Malka'
    ))

    register_options(
      [
        OptInt.new('SESSION', [true, 'Session ID to run this module on'])
      ]
    )
  end

  def run
    session = client

    print_status("Gathering information from session #{datastore['SESSION']}")
    
    # System Information
    gather_system_info

    # User Information
    gather_user_info

    # Network Information
    gather_network_info

    # Running Processes
    gather_running_processes
  end

  def gather_system_info
    print_status("Gathering system information...")
    os = sysinfo['OS']
    computer = sysinfo['Computer']
    print_good("OS: #{os}")
    print_good("Computer: #{computer}")
  end

  def gather_user_info
    print_status("Gathering user information...")
    user = getuid
    print_good("User: #{user}")
  end

  def gather_network_info
    print_status("Gathering network information...")
    interfaces = session.net.config.interfaces

    interfaces.each do |interface|
      print_good("Interface: #{interface.name}")
      interface.addrs.each do |addr|
        print_good("  Address: #{addr[:addr]}")
        print_good("  Netmask: #{addr[:netmask]}") if addr[:netmask]
        print_good("  Broadcast: #{addr[:bcast]}") if addr[:bcast]
      end
    end
  end

  def gather_running_processes
    print_status("Gathering running processes...")
    processes = client.sys.process.processes

    processes.each do |process|
      print_good("Process #{process['pid']} - #{process['name']}")
    end
  end
end
