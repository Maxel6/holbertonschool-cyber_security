require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Scanner

  def initialize
    super(
      'Name'        => 'Custom Port Scanner',
      'Description' => 'Scans a range of ports on a target and identifies open ports.',
      'Author'      => 'Axel Malka',
      'License'     => MSF_LICENSE
    )
    
    register_options(
      [
        Opt::RHOST(), # Target IP
        OptInt.new('STARTPORT', [true, 'Start of port range', 20]),
        OptInt.new('ENDPORT', [true, 'End of port range', 1000])
      ]
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT']
    end_port = datastore['ENDPORT']

    print_status("Scanning ports #{start_port}-#{end_port} on #{ip}")
    open_ports = []

    (start_port..end_port).each do |port|
      begin
        sock = connect(nil, ip, port, 1) # Connect to the port
        open_ports << port if sock # If connection succeeds, port is open
        disconnect(sock) if sock # Clean up connection
      rescue Rex::ConnectionError
        # Port is closed or unreachable; ignore
      end
    end

    if open_ports.empty?
      print_status("No open ports found on #{ip}")
    else
      open_ports.each do |port|
        print_good("#{ip}:#{port} - Port #{port} is open")
      end
      print_status("Open ports on #{ip}: #{open_ports.join(', ')}")
    end
  end
end
